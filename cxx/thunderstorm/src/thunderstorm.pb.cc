// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thunderstorm.proto

#include "thunderstorm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_thunderstorm_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_thunderstorm_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CylinderId;
}  // namespace protobuf_thunderstorm_2eproto
namespace thunderstorm {
class CylinderIdListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CylinderIdList>
      _instance;
} _CylinderIdList_default_instance_;
class CylinderIdDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CylinderId>
      _instance;
} _CylinderId_default_instance_;
}  // namespace thunderstorm
namespace protobuf_thunderstorm_2eproto {
static void InitDefaultsCylinderIdList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::thunderstorm::_CylinderIdList_default_instance_;
    new (ptr) ::thunderstorm::CylinderIdList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::thunderstorm::CylinderIdList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CylinderIdList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCylinderIdList}, {
      &protobuf_thunderstorm_2eproto::scc_info_CylinderId.base,}};

static void InitDefaultsCylinderId() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::thunderstorm::_CylinderId_default_instance_;
    new (ptr) ::thunderstorm::CylinderId();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::thunderstorm::CylinderId::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CylinderId =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCylinderId}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CylinderIdList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CylinderId.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderIdList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderIdList, eventid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderIdList, cylinderid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderId, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderId, parent_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderId, particle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderId, energy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderId, theta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderId, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::thunderstorm::CylinderId, z_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::thunderstorm::CylinderIdList)},
  { 7, -1, sizeof(::thunderstorm::CylinderId)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::thunderstorm::_CylinderIdList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::thunderstorm::_CylinderId_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "thunderstorm.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022thunderstorm.proto\022\014thunderstorm\"O\n\016Cy"
      "linderIdList\022\017\n\007eventId\030\001 \001(\005\022,\n\ncylinde"
      "rId\030\002 \003(\0132\030.thunderstorm.CylinderId\"w\n\nC"
      "ylinderId\022\n\n\002id\030\001 \001(\005\022\021\n\tparent_id\030\002 \001(\005"
      "\022\020\n\010particle\030\003 \001(\005\022\016\n\006energy\030\004 \001(\001\022\r\n\005th"
      "eta\030\005 \001(\001\022\016\n\006radius\030\006 \001(\001\022\t\n\001z\030\007 \001(\001b\006pr"
      "oto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 244);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "thunderstorm.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_thunderstorm_2eproto
namespace thunderstorm {

// ===================================================================

void CylinderIdList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CylinderIdList::kEventIdFieldNumber;
const int CylinderIdList::kCylinderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CylinderIdList::CylinderIdList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_thunderstorm_2eproto::scc_info_CylinderIdList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:thunderstorm.CylinderIdList)
}
CylinderIdList::CylinderIdList(const CylinderIdList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      cylinderid_(from.cylinderid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  eventid_ = from.eventid_;
  // @@protoc_insertion_point(copy_constructor:thunderstorm.CylinderIdList)
}

void CylinderIdList::SharedCtor() {
  eventid_ = 0;
}

CylinderIdList::~CylinderIdList() {
  // @@protoc_insertion_point(destructor:thunderstorm.CylinderIdList)
  SharedDtor();
}

void CylinderIdList::SharedDtor() {
}

void CylinderIdList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CylinderIdList::descriptor() {
  ::protobuf_thunderstorm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_thunderstorm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CylinderIdList& CylinderIdList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_thunderstorm_2eproto::scc_info_CylinderIdList.base);
  return *internal_default_instance();
}


void CylinderIdList::Clear() {
// @@protoc_insertion_point(message_clear_start:thunderstorm.CylinderIdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cylinderid_.Clear();
  eventid_ = 0;
  _internal_metadata_.Clear();
}

bool CylinderIdList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thunderstorm.CylinderIdList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 eventId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eventid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .thunderstorm.CylinderId cylinderId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_cylinderid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thunderstorm.CylinderIdList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thunderstorm.CylinderIdList)
  return false;
#undef DO_
}

void CylinderIdList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thunderstorm.CylinderIdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 eventId = 1;
  if (this->eventid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eventid(), output);
  }

  // repeated .thunderstorm.CylinderId cylinderId = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cylinderid_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->cylinderid(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:thunderstorm.CylinderIdList)
}

::google::protobuf::uint8* CylinderIdList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:thunderstorm.CylinderIdList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 eventId = 1;
  if (this->eventid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eventid(), target);
  }

  // repeated .thunderstorm.CylinderId cylinderId = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->cylinderid_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->cylinderid(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thunderstorm.CylinderIdList)
  return target;
}

size_t CylinderIdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thunderstorm.CylinderIdList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .thunderstorm.CylinderId cylinderId = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->cylinderid_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->cylinderid(static_cast<int>(i)));
    }
  }

  // int32 eventId = 1;
  if (this->eventid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eventid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CylinderIdList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thunderstorm.CylinderIdList)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderIdList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CylinderIdList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thunderstorm.CylinderIdList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thunderstorm.CylinderIdList)
    MergeFrom(*source);
  }
}

void CylinderIdList::MergeFrom(const CylinderIdList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thunderstorm.CylinderIdList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cylinderid_.MergeFrom(from.cylinderid_);
  if (from.eventid() != 0) {
    set_eventid(from.eventid());
  }
}

void CylinderIdList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thunderstorm.CylinderIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderIdList::CopyFrom(const CylinderIdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thunderstorm.CylinderIdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderIdList::IsInitialized() const {
  return true;
}

void CylinderIdList::Swap(CylinderIdList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CylinderIdList::InternalSwap(CylinderIdList* other) {
  using std::swap;
  CastToBase(&cylinderid_)->InternalSwap(CastToBase(&other->cylinderid_));
  swap(eventid_, other->eventid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CylinderIdList::GetMetadata() const {
  protobuf_thunderstorm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_thunderstorm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CylinderId::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CylinderId::kIdFieldNumber;
const int CylinderId::kParentIdFieldNumber;
const int CylinderId::kParticleFieldNumber;
const int CylinderId::kEnergyFieldNumber;
const int CylinderId::kThetaFieldNumber;
const int CylinderId::kRadiusFieldNumber;
const int CylinderId::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CylinderId::CylinderId()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_thunderstorm_2eproto::scc_info_CylinderId.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:thunderstorm.CylinderId)
}
CylinderId::CylinderId(const CylinderId& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&particle_) -
    reinterpret_cast<char*>(&id_)) + sizeof(particle_));
  // @@protoc_insertion_point(copy_constructor:thunderstorm.CylinderId)
}

void CylinderId::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&particle_) -
      reinterpret_cast<char*>(&id_)) + sizeof(particle_));
}

CylinderId::~CylinderId() {
  // @@protoc_insertion_point(destructor:thunderstorm.CylinderId)
  SharedDtor();
}

void CylinderId::SharedDtor() {
}

void CylinderId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CylinderId::descriptor() {
  ::protobuf_thunderstorm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_thunderstorm_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CylinderId& CylinderId::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_thunderstorm_2eproto::scc_info_CylinderId.base);
  return *internal_default_instance();
}


void CylinderId::Clear() {
// @@protoc_insertion_point(message_clear_start:thunderstorm.CylinderId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&particle_) -
      reinterpret_cast<char*>(&id_)) + sizeof(particle_));
  _internal_metadata_.Clear();
}

bool CylinderId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:thunderstorm.CylinderId)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 parent_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &parent_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 particle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &particle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double energy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double theta = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double radius = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u /* 57 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:thunderstorm.CylinderId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:thunderstorm.CylinderId)
  return false;
#undef DO_
}

void CylinderId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:thunderstorm.CylinderId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // int32 parent_id = 2;
  if (this->parent_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->parent_id(), output);
  }

  // int32 particle = 3;
  if (this->particle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->particle(), output);
  }

  // double energy = 4;
  if (this->energy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->energy(), output);
  }

  // double theta = 5;
  if (this->theta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->theta(), output);
  }

  // double radius = 6;
  if (this->radius() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->radius(), output);
  }

  // double z = 7;
  if (this->z() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->z(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:thunderstorm.CylinderId)
}

::google::protobuf::uint8* CylinderId::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:thunderstorm.CylinderId)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // int32 parent_id = 2;
  if (this->parent_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->parent_id(), target);
  }

  // int32 particle = 3;
  if (this->particle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->particle(), target);
  }

  // double energy = 4;
  if (this->energy() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->energy(), target);
  }

  // double theta = 5;
  if (this->theta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->theta(), target);
  }

  // double radius = 6;
  if (this->radius() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->radius(), target);
  }

  // double z = 7;
  if (this->z() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->z(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:thunderstorm.CylinderId)
  return target;
}

size_t CylinderId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:thunderstorm.CylinderId)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // int32 parent_id = 2;
  if (this->parent_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->parent_id());
  }

  // double energy = 4;
  if (this->energy() != 0) {
    total_size += 1 + 8;
  }

  // double theta = 5;
  if (this->theta() != 0) {
    total_size += 1 + 8;
  }

  // double radius = 6;
  if (this->radius() != 0) {
    total_size += 1 + 8;
  }

  // double z = 7;
  if (this->z() != 0) {
    total_size += 1 + 8;
  }

  // int32 particle = 3;
  if (this->particle() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->particle());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CylinderId::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:thunderstorm.CylinderId)
  GOOGLE_DCHECK_NE(&from, this);
  const CylinderId* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CylinderId>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:thunderstorm.CylinderId)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:thunderstorm.CylinderId)
    MergeFrom(*source);
  }
}

void CylinderId::MergeFrom(const CylinderId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:thunderstorm.CylinderId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id() != 0) {
    set_id(from.id());
  }
  if (from.parent_id() != 0) {
    set_parent_id(from.parent_id());
  }
  if (from.energy() != 0) {
    set_energy(from.energy());
  }
  if (from.theta() != 0) {
    set_theta(from.theta());
  }
  if (from.radius() != 0) {
    set_radius(from.radius());
  }
  if (from.z() != 0) {
    set_z(from.z());
  }
  if (from.particle() != 0) {
    set_particle(from.particle());
  }
}

void CylinderId::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:thunderstorm.CylinderId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CylinderId::CopyFrom(const CylinderId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:thunderstorm.CylinderId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CylinderId::IsInitialized() const {
  return true;
}

void CylinderId::Swap(CylinderId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CylinderId::InternalSwap(CylinderId* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(parent_id_, other->parent_id_);
  swap(energy_, other->energy_);
  swap(theta_, other->theta_);
  swap(radius_, other->radius_);
  swap(z_, other->z_);
  swap(particle_, other->particle_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CylinderId::GetMetadata() const {
  protobuf_thunderstorm_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_thunderstorm_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace thunderstorm
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::thunderstorm::CylinderIdList* Arena::CreateMaybeMessage< ::thunderstorm::CylinderIdList >(Arena* arena) {
  return Arena::CreateInternal< ::thunderstorm::CylinderIdList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::thunderstorm::CylinderId* Arena::CreateMaybeMessage< ::thunderstorm::CylinderId >(Arena* arena) {
  return Arena::CreateInternal< ::thunderstorm::CylinderId >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
