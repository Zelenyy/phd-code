// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thunderstorm.proto

#ifndef PROTOBUF_INCLUDED_thunderstorm_2eproto
#define PROTOBUF_INCLUDED_thunderstorm_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_thunderstorm_2eproto 

namespace protobuf_thunderstorm_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_thunderstorm_2eproto
namespace thunderstorm {
class CylinderId;
class CylinderIdDefaultTypeInternal;
extern CylinderIdDefaultTypeInternal _CylinderId_default_instance_;
class CylinderIdList;
class CylinderIdListDefaultTypeInternal;
extern CylinderIdListDefaultTypeInternal _CylinderIdList_default_instance_;
}  // namespace thunderstorm
namespace google {
namespace protobuf {
template<> ::thunderstorm::CylinderId* Arena::CreateMaybeMessage<::thunderstorm::CylinderId>(Arena*);
template<> ::thunderstorm::CylinderIdList* Arena::CreateMaybeMessage<::thunderstorm::CylinderIdList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace thunderstorm {

// ===================================================================

class CylinderIdList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thunderstorm.CylinderIdList) */ {
 public:
  CylinderIdList();
  virtual ~CylinderIdList();

  CylinderIdList(const CylinderIdList& from);

  inline CylinderIdList& operator=(const CylinderIdList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CylinderIdList(CylinderIdList&& from) noexcept
    : CylinderIdList() {
    *this = ::std::move(from);
  }

  inline CylinderIdList& operator=(CylinderIdList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CylinderIdList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CylinderIdList* internal_default_instance() {
    return reinterpret_cast<const CylinderIdList*>(
               &_CylinderIdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CylinderIdList* other);
  friend void swap(CylinderIdList& a, CylinderIdList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CylinderIdList* New() const final {
    return CreateMaybeMessage<CylinderIdList>(NULL);
  }

  CylinderIdList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CylinderIdList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CylinderIdList& from);
  void MergeFrom(const CylinderIdList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CylinderIdList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .thunderstorm.CylinderId cylinderId = 2;
  int cylinderid_size() const;
  void clear_cylinderid();
  static const int kCylinderIdFieldNumber = 2;
  ::thunderstorm::CylinderId* mutable_cylinderid(int index);
  ::google::protobuf::RepeatedPtrField< ::thunderstorm::CylinderId >*
      mutable_cylinderid();
  const ::thunderstorm::CylinderId& cylinderid(int index) const;
  ::thunderstorm::CylinderId* add_cylinderid();
  const ::google::protobuf::RepeatedPtrField< ::thunderstorm::CylinderId >&
      cylinderid() const;

  // int32 eventId = 1;
  void clear_eventid();
  static const int kEventIdFieldNumber = 1;
  ::google::protobuf::int32 eventid() const;
  void set_eventid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:thunderstorm.CylinderIdList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::thunderstorm::CylinderId > cylinderid_;
  ::google::protobuf::int32 eventid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_thunderstorm_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CylinderId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:thunderstorm.CylinderId) */ {
 public:
  CylinderId();
  virtual ~CylinderId();

  CylinderId(const CylinderId& from);

  inline CylinderId& operator=(const CylinderId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CylinderId(CylinderId&& from) noexcept
    : CylinderId() {
    *this = ::std::move(from);
  }

  inline CylinderId& operator=(CylinderId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CylinderId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CylinderId* internal_default_instance() {
    return reinterpret_cast<const CylinderId*>(
               &_CylinderId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CylinderId* other);
  friend void swap(CylinderId& a, CylinderId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CylinderId* New() const final {
    return CreateMaybeMessage<CylinderId>(NULL);
  }

  CylinderId* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CylinderId>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CylinderId& from);
  void MergeFrom(const CylinderId& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CylinderId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 parent_id = 2;
  void clear_parent_id();
  static const int kParentIdFieldNumber = 2;
  ::google::protobuf::int32 parent_id() const;
  void set_parent_id(::google::protobuf::int32 value);

  // double energy = 4;
  void clear_energy();
  static const int kEnergyFieldNumber = 4;
  double energy() const;
  void set_energy(double value);

  // double theta = 5;
  void clear_theta();
  static const int kThetaFieldNumber = 5;
  double theta() const;
  void set_theta(double value);

  // double radius = 6;
  void clear_radius();
  static const int kRadiusFieldNumber = 6;
  double radius() const;
  void set_radius(double value);

  // double z = 7;
  void clear_z();
  static const int kZFieldNumber = 7;
  double z() const;
  void set_z(double value);

  // int32 particle = 3;
  void clear_particle();
  static const int kParticleFieldNumber = 3;
  ::google::protobuf::int32 particle() const;
  void set_particle(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:thunderstorm.CylinderId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 parent_id_;
  double energy_;
  double theta_;
  double radius_;
  double z_;
  ::google::protobuf::int32 particle_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_thunderstorm_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CylinderIdList

// int32 eventId = 1;
inline void CylinderIdList::clear_eventid() {
  eventid_ = 0;
}
inline ::google::protobuf::int32 CylinderIdList::eventid() const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderIdList.eventId)
  return eventid_;
}
inline void CylinderIdList::set_eventid(::google::protobuf::int32 value) {
  
  eventid_ = value;
  // @@protoc_insertion_point(field_set:thunderstorm.CylinderIdList.eventId)
}

// repeated .thunderstorm.CylinderId cylinderId = 2;
inline int CylinderIdList::cylinderid_size() const {
  return cylinderid_.size();
}
inline void CylinderIdList::clear_cylinderid() {
  cylinderid_.Clear();
}
inline ::thunderstorm::CylinderId* CylinderIdList::mutable_cylinderid(int index) {
  // @@protoc_insertion_point(field_mutable:thunderstorm.CylinderIdList.cylinderId)
  return cylinderid_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::thunderstorm::CylinderId >*
CylinderIdList::mutable_cylinderid() {
  // @@protoc_insertion_point(field_mutable_list:thunderstorm.CylinderIdList.cylinderId)
  return &cylinderid_;
}
inline const ::thunderstorm::CylinderId& CylinderIdList::cylinderid(int index) const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderIdList.cylinderId)
  return cylinderid_.Get(index);
}
inline ::thunderstorm::CylinderId* CylinderIdList::add_cylinderid() {
  // @@protoc_insertion_point(field_add:thunderstorm.CylinderIdList.cylinderId)
  return cylinderid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::thunderstorm::CylinderId >&
CylinderIdList::cylinderid() const {
  // @@protoc_insertion_point(field_list:thunderstorm.CylinderIdList.cylinderId)
  return cylinderid_;
}

// -------------------------------------------------------------------

// CylinderId

// int32 id = 1;
inline void CylinderId::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 CylinderId::id() const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderId.id)
  return id_;
}
inline void CylinderId::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:thunderstorm.CylinderId.id)
}

// int32 parent_id = 2;
inline void CylinderId::clear_parent_id() {
  parent_id_ = 0;
}
inline ::google::protobuf::int32 CylinderId::parent_id() const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderId.parent_id)
  return parent_id_;
}
inline void CylinderId::set_parent_id(::google::protobuf::int32 value) {
  
  parent_id_ = value;
  // @@protoc_insertion_point(field_set:thunderstorm.CylinderId.parent_id)
}

// int32 particle = 3;
inline void CylinderId::clear_particle() {
  particle_ = 0;
}
inline ::google::protobuf::int32 CylinderId::particle() const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderId.particle)
  return particle_;
}
inline void CylinderId::set_particle(::google::protobuf::int32 value) {
  
  particle_ = value;
  // @@protoc_insertion_point(field_set:thunderstorm.CylinderId.particle)
}

// double energy = 4;
inline void CylinderId::clear_energy() {
  energy_ = 0;
}
inline double CylinderId::energy() const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderId.energy)
  return energy_;
}
inline void CylinderId::set_energy(double value) {
  
  energy_ = value;
  // @@protoc_insertion_point(field_set:thunderstorm.CylinderId.energy)
}

// double theta = 5;
inline void CylinderId::clear_theta() {
  theta_ = 0;
}
inline double CylinderId::theta() const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderId.theta)
  return theta_;
}
inline void CylinderId::set_theta(double value) {
  
  theta_ = value;
  // @@protoc_insertion_point(field_set:thunderstorm.CylinderId.theta)
}

// double radius = 6;
inline void CylinderId::clear_radius() {
  radius_ = 0;
}
inline double CylinderId::radius() const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderId.radius)
  return radius_;
}
inline void CylinderId::set_radius(double value) {
  
  radius_ = value;
  // @@protoc_insertion_point(field_set:thunderstorm.CylinderId.radius)
}

// double z = 7;
inline void CylinderId::clear_z() {
  z_ = 0;
}
inline double CylinderId::z() const {
  // @@protoc_insertion_point(field_get:thunderstorm.CylinderId.z)
  return z_;
}
inline void CylinderId::set_z(double value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:thunderstorm.CylinderId.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace thunderstorm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_thunderstorm_2eproto
