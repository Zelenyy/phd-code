// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: satellite.proto

#ifndef PROTOBUF_INCLUDED_satellite_2eproto
#define PROTOBUF_INCLUDED_satellite_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_satellite_2eproto 

namespace protobuf_satellite_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_satellite_2eproto
namespace satellite {
class Event;
class EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class Run;
class RunDefaultTypeInternal;
extern RunDefaultTypeInternal _Run_default_instance_;
}  // namespace satellite
namespace google {
namespace protobuf {
template<> ::satellite::Event* Arena::CreateMaybeMessage<::satellite::Event>(Arena*);
template<> ::satellite::Run* Arena::CreateMaybeMessage<::satellite::Run>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace satellite {

// ===================================================================

class Event : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:satellite.Event) */ {
 public:
  Event();
  virtual ~Event();

  Event(const Event& from);

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(Event&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Event& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Event* other);
  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Event* New() const final {
    return CreateMaybeMessage<Event>(NULL);
  }

  Event* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Event& from);
  void MergeFrom(const Event& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double deposit = 1 [packed = true];
  int deposit_size() const;
  void clear_deposit();
  static const int kDepositFieldNumber = 1;
  double deposit(int index) const;
  void set_deposit(int index, double value);
  void add_deposit(double value);
  const ::google::protobuf::RepeatedField< double >&
      deposit() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_deposit();

  // @@protoc_insertion_point(class_scope:satellite.Event)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< double > deposit_;
  mutable int _deposit_cached_byte_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Run : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:satellite.Run) */ {
 public:
  Run();
  virtual ~Run();

  Run(const Run& from);

  inline Run& operator=(const Run& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Run(Run&& from) noexcept
    : Run() {
    *this = ::std::move(from);
  }

  inline Run& operator=(Run&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Run& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Run* internal_default_instance() {
    return reinterpret_cast<const Run*>(
               &_Run_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Run* other);
  friend void swap(Run& a, Run& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Run* New() const final {
    return CreateMaybeMessage<Run>(NULL);
  }

  Run* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Run>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Run& from);
  void MergeFrom(const Run& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Run* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .satellite.Event event = 1;
  int event_size() const;
  void clear_event();
  static const int kEventFieldNumber = 1;
  ::satellite::Event* mutable_event(int index);
  ::google::protobuf::RepeatedPtrField< ::satellite::Event >*
      mutable_event();
  const ::satellite::Event& event(int index) const;
  ::satellite::Event* add_event();
  const ::google::protobuf::RepeatedPtrField< ::satellite::Event >&
      event() const;

  // @@protoc_insertion_point(class_scope:satellite.Run)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::satellite::Event > event_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_satellite_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// repeated double deposit = 1 [packed = true];
inline int Event::deposit_size() const {
  return deposit_.size();
}
inline void Event::clear_deposit() {
  deposit_.Clear();
}
inline double Event::deposit(int index) const {
  // @@protoc_insertion_point(field_get:satellite.Event.deposit)
  return deposit_.Get(index);
}
inline void Event::set_deposit(int index, double value) {
  deposit_.Set(index, value);
  // @@protoc_insertion_point(field_set:satellite.Event.deposit)
}
inline void Event::add_deposit(double value) {
  deposit_.Add(value);
  // @@protoc_insertion_point(field_add:satellite.Event.deposit)
}
inline const ::google::protobuf::RepeatedField< double >&
Event::deposit() const {
  // @@protoc_insertion_point(field_list:satellite.Event.deposit)
  return deposit_;
}
inline ::google::protobuf::RepeatedField< double >*
Event::mutable_deposit() {
  // @@protoc_insertion_point(field_mutable_list:satellite.Event.deposit)
  return &deposit_;
}

// -------------------------------------------------------------------

// Run

// repeated .satellite.Event event = 1;
inline int Run::event_size() const {
  return event_.size();
}
inline void Run::clear_event() {
  event_.Clear();
}
inline ::satellite::Event* Run::mutable_event(int index) {
  // @@protoc_insertion_point(field_mutable:satellite.Run.event)
  return event_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::satellite::Event >*
Run::mutable_event() {
  // @@protoc_insertion_point(field_mutable_list:satellite.Run.event)
  return &event_;
}
inline const ::satellite::Event& Run::event(int index) const {
  // @@protoc_insertion_point(field_get:satellite.Run.event)
  return event_.Get(index);
}
inline ::satellite::Event* Run::add_event() {
  // @@protoc_insertion_point(field_add:satellite.Run.event)
  return event_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::satellite::Event >&
Run::event() const {
  // @@protoc_insertion_point(field_list:satellite.Run.event)
  return event_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace satellite

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_satellite_2eproto
