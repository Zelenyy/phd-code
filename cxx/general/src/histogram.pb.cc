// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: histogram.proto

#include "histogram.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_histogram_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_histogram_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Bins;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_histogram_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MetaPair;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_histogram_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Histogram2D;
}  // namespace protobuf_histogram_2eproto
namespace histogram {
class Histogram2DListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Histogram2DList>
      _instance;
} _Histogram2DList_default_instance_;
class Histogram2DDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Histogram2D>
      _instance;
} _Histogram2D_default_instance_;
class BinsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Bins>
      _instance;
} _Bins_default_instance_;
class MetaPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MetaPair>
      _instance;
} _MetaPair_default_instance_;
}  // namespace histogram
namespace protobuf_histogram_2eproto {
static void InitDefaultsHistogram2DList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::histogram::_Histogram2DList_default_instance_;
    new (ptr) ::histogram::Histogram2DList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::histogram::Histogram2DList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Histogram2DList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHistogram2DList}, {
      &protobuf_histogram_2eproto::scc_info_Histogram2D.base,}};

static void InitDefaultsHistogram2D() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::histogram::_Histogram2D_default_instance_;
    new (ptr) ::histogram::Histogram2D();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::histogram::Histogram2D::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Histogram2D =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsHistogram2D}, {
      &protobuf_histogram_2eproto::scc_info_Bins.base,
      &protobuf_histogram_2eproto::scc_info_MetaPair.base,}};

static void InitDefaultsBins() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::histogram::_Bins_default_instance_;
    new (ptr) ::histogram::Bins();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::histogram::Bins::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Bins =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBins}, {}};

static void InitDefaultsMetaPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::histogram::_MetaPair_default_instance_;
    new (ptr) ::histogram::MetaPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::histogram::MetaPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MetaPair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMetaPair}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Histogram2DList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Histogram2D.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Bins.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MetaPair.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Histogram2DList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Histogram2DList, histogram_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Histogram2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Histogram2D, data_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Histogram2D, xbins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Histogram2D, ybins_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Histogram2D, meta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Bins, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::Bins, bins_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::MetaPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::MetaPair, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::histogram::MetaPair, value_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::histogram::Histogram2DList)},
  { 6, -1, sizeof(::histogram::Histogram2D)},
  { 15, -1, sizeof(::histogram::Bins)},
  { 21, -1, sizeof(::histogram::MetaPair)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::histogram::_Histogram2DList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::histogram::_Histogram2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::histogram::_Bins_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::histogram::_MetaPair_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "histogram.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\017histogram.proto\022\thistogram\"<\n\017Histogra"
      "m2DList\022)\n\thistogram\030\001 \003(\0132\026.histogram.H"
      "istogram2D\"\202\001\n\013Histogram2D\022\020\n\004data\030\001 \003(\005"
      "B\002\020\001\022\036\n\005xbins\030\002 \001(\0132\017.histogram.Bins\022\036\n\005"
      "ybins\030\003 \001(\0132\017.histogram.Bins\022!\n\004meta\030\004 \003"
      "(\0132\023.histogram.MetaPair\"\030\n\004Bins\022\020\n\004bins\030"
      "\001 \003(\001B\002\020\001\"&\n\010MetaPair\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "histogram.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_histogram_2eproto
namespace histogram {

// ===================================================================

void Histogram2DList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histogram2DList::kHistogramFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histogram2DList::Histogram2DList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_histogram_2eproto::scc_info_Histogram2DList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:histogram.Histogram2DList)
}
Histogram2DList::Histogram2DList(const Histogram2DList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      histogram_(from.histogram_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:histogram.Histogram2DList)
}

void Histogram2DList::SharedCtor() {
}

Histogram2DList::~Histogram2DList() {
  // @@protoc_insertion_point(destructor:histogram.Histogram2DList)
  SharedDtor();
}

void Histogram2DList::SharedDtor() {
}

void Histogram2DList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Histogram2DList::descriptor() {
  ::protobuf_histogram_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_histogram_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Histogram2DList& Histogram2DList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_histogram_2eproto::scc_info_Histogram2DList.base);
  return *internal_default_instance();
}


void Histogram2DList::Clear() {
// @@protoc_insertion_point(message_clear_start:histogram.Histogram2DList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  histogram_.Clear();
  _internal_metadata_.Clear();
}

bool Histogram2DList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:histogram.Histogram2DList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .histogram.Histogram2D histogram = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_histogram()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:histogram.Histogram2DList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:histogram.Histogram2DList)
  return false;
#undef DO_
}

void Histogram2DList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:histogram.Histogram2DList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .histogram.Histogram2D histogram = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->histogram_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->histogram(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:histogram.Histogram2DList)
}

::google::protobuf::uint8* Histogram2DList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:histogram.Histogram2DList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .histogram.Histogram2D histogram = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->histogram_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->histogram(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:histogram.Histogram2DList)
  return target;
}

size_t Histogram2DList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:histogram.Histogram2DList)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .histogram.Histogram2D histogram = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->histogram_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->histogram(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histogram2DList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:histogram.Histogram2DList)
  GOOGLE_DCHECK_NE(&from, this);
  const Histogram2DList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Histogram2DList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:histogram.Histogram2DList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:histogram.Histogram2DList)
    MergeFrom(*source);
  }
}

void Histogram2DList::MergeFrom(const Histogram2DList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:histogram.Histogram2DList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  histogram_.MergeFrom(from.histogram_);
}

void Histogram2DList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:histogram.Histogram2DList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram2DList::CopyFrom(const Histogram2DList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:histogram.Histogram2DList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram2DList::IsInitialized() const {
  return true;
}

void Histogram2DList::Swap(Histogram2DList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histogram2DList::InternalSwap(Histogram2DList* other) {
  using std::swap;
  CastToBase(&histogram_)->InternalSwap(CastToBase(&other->histogram_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Histogram2DList::GetMetadata() const {
  protobuf_histogram_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_histogram_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Histogram2D::InitAsDefaultInstance() {
  ::histogram::_Histogram2D_default_instance_._instance.get_mutable()->xbins_ = const_cast< ::histogram::Bins*>(
      ::histogram::Bins::internal_default_instance());
  ::histogram::_Histogram2D_default_instance_._instance.get_mutable()->ybins_ = const_cast< ::histogram::Bins*>(
      ::histogram::Bins::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Histogram2D::kDataFieldNumber;
const int Histogram2D::kXbinsFieldNumber;
const int Histogram2D::kYbinsFieldNumber;
const int Histogram2D::kMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Histogram2D::Histogram2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_histogram_2eproto::scc_info_Histogram2D.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:histogram.Histogram2D)
}
Histogram2D::Histogram2D(const Histogram2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      meta_(from.meta_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_xbins()) {
    xbins_ = new ::histogram::Bins(*from.xbins_);
  } else {
    xbins_ = NULL;
  }
  if (from.has_ybins()) {
    ybins_ = new ::histogram::Bins(*from.ybins_);
  } else {
    ybins_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:histogram.Histogram2D)
}

void Histogram2D::SharedCtor() {
  ::memset(&xbins_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ybins_) -
      reinterpret_cast<char*>(&xbins_)) + sizeof(ybins_));
}

Histogram2D::~Histogram2D() {
  // @@protoc_insertion_point(destructor:histogram.Histogram2D)
  SharedDtor();
}

void Histogram2D::SharedDtor() {
  if (this != internal_default_instance()) delete xbins_;
  if (this != internal_default_instance()) delete ybins_;
}

void Histogram2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Histogram2D::descriptor() {
  ::protobuf_histogram_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_histogram_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Histogram2D& Histogram2D::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_histogram_2eproto::scc_info_Histogram2D.base);
  return *internal_default_instance();
}


void Histogram2D::Clear() {
// @@protoc_insertion_point(message_clear_start:histogram.Histogram2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  meta_.Clear();
  if (GetArenaNoVirtual() == NULL && xbins_ != NULL) {
    delete xbins_;
  }
  xbins_ = NULL;
  if (GetArenaNoVirtual() == NULL && ybins_ != NULL) {
    delete ybins_;
  }
  ybins_ = NULL;
  _internal_metadata_.Clear();
}

bool Histogram2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:histogram.Histogram2D)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 data = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .histogram.Bins xbins = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_xbins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .histogram.Bins ybins = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ybins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .histogram.MetaPair meta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:histogram.Histogram2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:histogram.Histogram2D)
  return false;
#undef DO_
}

void Histogram2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:histogram.Histogram2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 1 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
  }
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  // .histogram.Bins xbins = 2;
  if (this->has_xbins()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_xbins(), output);
  }

  // .histogram.Bins ybins = 3;
  if (this->has_ybins()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_ybins(), output);
  }

  // repeated .histogram.MetaPair meta = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->meta(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:histogram.Histogram2D)
}

::google::protobuf::uint8* Histogram2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:histogram.Histogram2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 data = 1 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data_, target);
  }

  // .histogram.Bins xbins = 2;
  if (this->has_xbins()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_xbins(), deterministic, target);
  }

  // .histogram.Bins ybins = 3;
  if (this->has_ybins()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_ybins(), deterministic, target);
  }

  // repeated .histogram.MetaPair meta = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->meta_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->meta(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:histogram.Histogram2D)
  return target;
}

size_t Histogram2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:histogram.Histogram2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 data = 1 [packed = true];
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated .histogram.MetaPair meta = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->meta_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->meta(static_cast<int>(i)));
    }
  }

  // .histogram.Bins xbins = 2;
  if (this->has_xbins()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *xbins_);
  }

  // .histogram.Bins ybins = 3;
  if (this->has_ybins()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *ybins_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Histogram2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:histogram.Histogram2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Histogram2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Histogram2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:histogram.Histogram2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:histogram.Histogram2D)
    MergeFrom(*source);
  }
}

void Histogram2D::MergeFrom(const Histogram2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:histogram.Histogram2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  meta_.MergeFrom(from.meta_);
  if (from.has_xbins()) {
    mutable_xbins()->::histogram::Bins::MergeFrom(from.xbins());
  }
  if (from.has_ybins()) {
    mutable_ybins()->::histogram::Bins::MergeFrom(from.ybins());
  }
}

void Histogram2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:histogram.Histogram2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Histogram2D::CopyFrom(const Histogram2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:histogram.Histogram2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Histogram2D::IsInitialized() const {
  return true;
}

void Histogram2D::Swap(Histogram2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Histogram2D::InternalSwap(Histogram2D* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  CastToBase(&meta_)->InternalSwap(CastToBase(&other->meta_));
  swap(xbins_, other->xbins_);
  swap(ybins_, other->ybins_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Histogram2D::GetMetadata() const {
  protobuf_histogram_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_histogram_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Bins::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bins::kBinsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bins::Bins()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_histogram_2eproto::scc_info_Bins.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:histogram.Bins)
}
Bins::Bins(const Bins& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      bins_(from.bins_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:histogram.Bins)
}

void Bins::SharedCtor() {
}

Bins::~Bins() {
  // @@protoc_insertion_point(destructor:histogram.Bins)
  SharedDtor();
}

void Bins::SharedDtor() {
}

void Bins::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Bins::descriptor() {
  ::protobuf_histogram_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_histogram_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Bins& Bins::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_histogram_2eproto::scc_info_Bins.base);
  return *internal_default_instance();
}


void Bins::Clear() {
// @@protoc_insertion_point(message_clear_start:histogram.Bins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bins_.Clear();
  _internal_metadata_.Clear();
}

bool Bins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:histogram.Bins)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double bins = 1 [packed = true];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_bins())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10u, input, this->mutable_bins())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:histogram.Bins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:histogram.Bins)
  return false;
#undef DO_
}

void Bins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:histogram.Bins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double bins = 1 [packed = true];
  if (this->bins_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _bins_cached_byte_size_));
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->bins().data(), this->bins_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:histogram.Bins)
}

::google::protobuf::uint8* Bins::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:histogram.Bins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double bins = 1 [packed = true];
  if (this->bins_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::int32>(
            _bins_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->bins_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:histogram.Bins)
  return target;
}

size_t Bins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:histogram.Bins)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated double bins = 1 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->bins_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _bins_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Bins::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:histogram.Bins)
  GOOGLE_DCHECK_NE(&from, this);
  const Bins* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Bins>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:histogram.Bins)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:histogram.Bins)
    MergeFrom(*source);
  }
}

void Bins::MergeFrom(const Bins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:histogram.Bins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bins_.MergeFrom(from.bins_);
}

void Bins::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:histogram.Bins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Bins::CopyFrom(const Bins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:histogram.Bins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bins::IsInitialized() const {
  return true;
}

void Bins::Swap(Bins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bins::InternalSwap(Bins* other) {
  using std::swap;
  bins_.InternalSwap(&other->bins_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Bins::GetMetadata() const {
  protobuf_histogram_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_histogram_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MetaPair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MetaPair::kKeyFieldNumber;
const int MetaPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MetaPair::MetaPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_histogram_2eproto::scc_info_MetaPair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:histogram.MetaPair)
}
MetaPair::MetaPair(const MetaPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.value().size() > 0) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:histogram.MetaPair)
}

void MetaPair::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MetaPair::~MetaPair() {
  // @@protoc_insertion_point(destructor:histogram.MetaPair)
  SharedDtor();
}

void MetaPair::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MetaPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MetaPair::descriptor() {
  ::protobuf_histogram_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_histogram_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MetaPair& MetaPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_histogram_2eproto::scc_info_MetaPair.base);
  return *internal_default_instance();
}


void MetaPair::Clear() {
// @@protoc_insertion_point(message_clear_start:histogram.MetaPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MetaPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:histogram.MetaPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "histogram.MetaPair.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "histogram.MetaPair.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:histogram.MetaPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:histogram.MetaPair)
  return false;
#undef DO_
}

void MetaPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:histogram.MetaPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "histogram.MetaPair.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "histogram.MetaPair.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:histogram.MetaPair)
}

::google::protobuf::uint8* MetaPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:histogram.MetaPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "histogram.MetaPair.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "histogram.MetaPair.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:histogram.MetaPair)
  return target;
}

size_t MetaPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:histogram.MetaPair)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MetaPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:histogram.MetaPair)
  GOOGLE_DCHECK_NE(&from, this);
  const MetaPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MetaPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:histogram.MetaPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:histogram.MetaPair)
    MergeFrom(*source);
  }
}

void MetaPair::MergeFrom(const MetaPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:histogram.MetaPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MetaPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:histogram.MetaPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaPair::CopyFrom(const MetaPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:histogram.MetaPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaPair::IsInitialized() const {
  return true;
}

void MetaPair::Swap(MetaPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MetaPair::InternalSwap(MetaPair* other) {
  using std::swap;
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MetaPair::GetMetadata() const {
  protobuf_histogram_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_histogram_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace histogram
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::histogram::Histogram2DList* Arena::CreateMaybeMessage< ::histogram::Histogram2DList >(Arena* arena) {
  return Arena::CreateInternal< ::histogram::Histogram2DList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::histogram::Histogram2D* Arena::CreateMaybeMessage< ::histogram::Histogram2D >(Arena* arena) {
  return Arena::CreateInternal< ::histogram::Histogram2D >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::histogram::Bins* Arena::CreateMaybeMessage< ::histogram::Bins >(Arena* arena) {
  return Arena::CreateInternal< ::histogram::Bins >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::histogram::MetaPair* Arena::CreateMaybeMessage< ::histogram::MetaPair >(Arena* arena) {
  return Arena::CreateInternal< ::histogram::MetaPair >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
